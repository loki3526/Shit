#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>
#include <sys/types.h>
#include <sys/wait.h>

pid_t child_pid = 0; // Global variable to store child process 
ID
// Signal handler for SIGCHLD (child termination)
void handle_sigchld(int sig) {
 int status;
 pid_t pid = waitpid(child_pid, &status, WNOHANG);
 if (pid > 0) {
 printf("Child process %d terminated.\n", pid);
 exit(0); // Exit the parent process after child 
termination
 }
}
// Signal handler for SIGALRM (alarm signal)
void handle_sigalrm(int sig) {
 printf("Child process took too long. Killing child process 
%d.\n", child_pid);
 kill(child_pid, SIGKILL); // Terminate the child process
 waitpid(child_pid, NULL, 0); // Clean up zombie process
 exit(0); // Exit the parent process after killing the child
}
int main(int argc, char *argv[]) {
 if (argc < 2) {
 fprintf(stderr, "Usage: %s <command> [args...]\n", 
argv[0]);
 exit(1);
 }
 // Set up the signal handlers
 signal(SIGCHLD, handle_sigchld); // Handle child 
termination
 signal(SIGALRM, handle_sigalrm); // Handle alarm 
timeout
 // Fork a child process
 child_pid = fork();
 if (child_pid < 0) {
 perror("fork failed");
 exit(1);
 } else if (child_pid == 0) {
 // Child process: Execute the command
 execvp(argv[1], &argv[1]);
 perror("execvp failed"); // Exec failed if this line runs
 exit(1);
} else {
 // Parent process: Set an alarm for 5 seconds
 alarm(5);
 // Wait for the child process to complete or alarm to 
trigger
 pause(); // Suspend until a signal arrives
 }
 return 0;
}
__

